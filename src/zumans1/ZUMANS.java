
package zumans1;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.event.KeyEvent.VK_DOWN;
import static java.awt.event.KeyEvent.VK_LEFT;
import static java.awt.event.KeyEvent.VK_RIGHT;
import static java.awt.event.KeyEvent.VK_SPACE;
import static java.awt.event.KeyEvent.VK_UP;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import static java.lang.Math.abs;
import java.util.LinkedList;
import java.util.Scanner;
import java.util.Random;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.Timer;
public class ZUMANS extends javax.swing.JFrame {
//ZUMANS_MENU_PAGE ZM=new ZUMANS_MENU_PAGE();
    int volumep=1;int winlevel = 3;
    public int ready_gun = 0;
//    public int winlevel = ZM.level ;
//    int volumep=ZM.volumem;
    int Screenw;int Screenh;JPanel panel;
//    Rectangle frame;
       
    public ZUMANS() {
        try {

     
          
            this.setIconImage(ImageIO.read(new File("C:\\ZUMANS\\images_zumans\\screenshot_2021-04-06-13-09-58.png")));
            ////
//            Dimension Screen=Toolkit.getDefaultToolkit().getScreenSize();
//            Screenw=(int)Screen.getWidth();
//            Screenh=(int)Screen.getHeight();
//            this.setBounds(0,0,Screenw,Screenh);
//                System.out.println(this.getName());
//              this.setSize(30,39);
            
              //frame=Screen.
            //this.sets
              //System.out.println(this.getSize());
              /////
            //playsoundl(getClass().getResource("/ZUMANS/audios_zumans/Zombie Rock .wav"));   
            playsoundl("C:\\ZUMANS\\audios_zumans\\Zombie-Rock.wav");            
            initComponents();
            custom_cursor();
            fileinit();
            processline();
            Loldtown.setFocusable(true);
            printlevel();
            Commentbox.setText("!...Game has Started...!");
            new Timer(300, (ActionEvent e) -> {
                    printlevel();}).start();
            new Timer(700, (ActionEvent e) -> {
                   // printlevel();
                    if (pause == 0) {
                    status_update();//gunpp();
                    moveenemy();
                    movehuman();
                    pp();

                }
               

            }).start();


        } catch (IOException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void custom_cursor() {
        Toolkit tk = Toolkit.getDefaultToolkit();
        Image Icur = tk.getImage("C:\\ZUMANS\\images_zumans\\cursor.png");
        Point point = new Point(0, 0);
        Cursor Ccur = tk.createCustomCursor(Icur, point, "CURSOR");
        setCursor(Ccur);
    }

    public void status_update() {
        TLCC.setText(String.valueOf(citizens.size()));
        TLCS.setText(String.valueOf(citizens_saved) + "/" + String.valueOf(citizens_died));
        if (current[0] == -1) {
            TLPG.setText("-");
        } else {
            TLPG.setText(guns.get(current[0]).gname);
        }
        if (current[0] == -1) {
            TLBC.setText("-");
        } else {
            TLBC.setText(String.valueOf(guns.get(current[0]).gbulletr + "/" + guns.get(current[0]).grange));
        }
        TLZC.setText(String.valueOf(enemies.size()));
        TLZK.setText(String.valueOf((total_zombies - enemies.size())));
        TLLP.setText(String.valueOf(Life_pakage));
        TLL.setText(String.valueOf(player._plevel));
    }
    
    public  void pp(){
        humanpp();
        engpp();
        docpp();  
        enemypp();
        medpp();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel11 = new javax.swing.JLabel();
        basePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Loldtown = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tcomments = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        Commentbox = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        Bplayer = new javax.swing.JButton();
        BEngineer = new javax.swing.JButton();
        Bbiotech = new javax.swing.JButton();
        Bhuman = new javax.swing.JButton();
        Bhuman1 = new javax.swing.JButton();
        Bzombie = new javax.swing.JButton();
        Bzombie1 = new javax.swing.JButton();
        Btree = new javax.swing.JButton();
        Bgun1 = new javax.swing.JButton();
        Bgun = new javax.swing.JButton();
        Bbullet = new javax.swing.JButton();
        Bhwall = new javax.swing.JButton();
        Bvwall = new javax.swing.JButton();
        Bfire = new javax.swing.JButton();
        Bvwall1 = new javax.swing.JButton();
        Bfood = new javax.swing.JButton();
        Bvaccine1 = new javax.swing.JButton();
        Bmedicine = new javax.swing.JButton();
        Tstatus = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        TLCC = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        TLPG = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TLZC = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TLL = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        TLCS = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        TLBC = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        TLZK = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        TLLP = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        BMap = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jLabel11.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(235, 26, 26));
        jLabel11.setText("NO.OF.CIVILIANS.....->");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(".ZUMANS,");
        setBackground(new java.awt.Color(0, 102, 204));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        basePanel.setBackground(new java.awt.Color(0, 0, 0));
        basePanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        basePanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                basePanelKeyPressed(evt);
            }
        });
        basePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jScrollPane1.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setEnabled(false);

        Loldtown.setBackground(new java.awt.Color(56, 170, 82));
        Loldtown.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 1, true));
        Loldtown.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                LoldtownKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                LoldtownKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout LoldtownLayout = new javax.swing.GroupLayout(Loldtown);
        Loldtown.setLayout(LoldtownLayout);
        LoldtownLayout.setHorizontalGroup(
            LoldtownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2778, Short.MAX_VALUE)
        );
        LoldtownLayout.setVerticalGroup(
            LoldtownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1477, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(Loldtown);

        basePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1920, 780));

        jScrollPane2.setViewportBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 2, true));
        jScrollPane2.setAutoscrolls(true);
        jScrollPane2.setFocusable(false);

        Tcomments.setBackground(new java.awt.Color(0, 0, 0));
        Tcomments.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 3, true));
        Tcomments.setForeground(new java.awt.Color(255, 0, 0));
        Tcomments.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        Tcomments.setTabPlacement(javax.swing.JTabbedPane.LEFT);
        Tcomments.setAutoscrolls(true);
        Tcomments.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Tcomments.setFocusable(false);
        Tcomments.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 1, 18)); // NOI18N
        Tcomments.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.setForeground(new java.awt.Color(255, 0, 51));
        jPanel2.setFocusable(false);

        Commentbox.setEditable(false);
        Commentbox.setBackground(new java.awt.Color(0, 0, 0));
        Commentbox.setColumns(20);
        Commentbox.setFont(new java.awt.Font("Monospaced", 2, 16)); // NOI18N
        Commentbox.setForeground(new java.awt.Color(255, 0, 51));
        Commentbox.setRows(5);
        Commentbox.setText("  ");
        Commentbox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 2, true));
        jScrollPane5.setViewportView(Commentbox);

        jScrollPane4.setViewportView(jScrollPane5);

        jTextArea1.setBackground(new java.awt.Color(0, 0, 0));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 51, 0));
        jTextArea1.setRows(5);
        jTextArea1.setText("Notice...................................\n......U can pause and click the characters\nto know their current status..............");
        jTextArea1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 0), 1, true));
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(894, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        Tcomments.addTab("COMMENTS", jPanel2);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setForeground(new java.awt.Color(255, 0, 51));
        jPanel1.setFocusable(false);
        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        Bplayer.setBackground(new java.awt.Color(0, 0, 0));
        Bplayer.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bplayer.setForeground(new java.awt.Color(255, 0, 51));
        Bplayer.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\man_police_officer_60px.png")); // NOI18N
        Bplayer.setFocusable(false);
        Bplayer.setVerifyInputWhenFocusTarget(false);
        Bplayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BplayerActionPerformed(evt);
            }
        });
        jPanel1.add(Bplayer);

        BEngineer.setBackground(new java.awt.Color(0, 0, 0));
        BEngineer.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        BEngineer.setForeground(new java.awt.Color(255, 0, 51));
        BEngineer.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\man_office_worker_60px.png")); // NOI18N
        BEngineer.setFocusable(false);
        jPanel1.add(BEngineer);

        Bbiotech.setBackground(new java.awt.Color(0, 0, 0));
        Bbiotech.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bbiotech.setForeground(new java.awt.Color(255, 0, 51));
        Bbiotech.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\man_scientist_60px.png")); // NOI18N
        Bbiotech.setFocusable(false);
        jPanel1.add(Bbiotech);

        Bhuman.setBackground(new java.awt.Color(0, 0, 0));
        Bhuman.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bhuman.setForeground(new java.awt.Color(255, 0, 51));
        Bhuman.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\man_fairy_60px.png")); // NOI18N
        Bhuman.setFocusable(false);
        jPanel1.add(Bhuman);

        Bhuman1.setBackground(new java.awt.Color(0, 0, 0));
        Bhuman1.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bhuman1.setForeground(new java.awt.Color(255, 0, 51));
        Bhuman1.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\woman_fairy_60px.png")); // NOI18N
        Bhuman1.setFocusable(false);
        jPanel1.add(Bhuman1);

        Bzombie.setBackground(new java.awt.Color(0, 0, 0));
        Bzombie.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bzombie.setForeground(new java.awt.Color(255, 0, 51));
        Bzombie.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\man_zombie_60px.png")); // NOI18N
        Bzombie.setFocusable(false);
        Bzombie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BzombieActionPerformed(evt);
            }
        });
        jPanel1.add(Bzombie);

        Bzombie1.setBackground(new java.awt.Color(0, 0, 0));
        Bzombie1.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bzombie1.setForeground(new java.awt.Color(255, 0, 51));
        Bzombie1.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\woman_zombie_60px.png")); // NOI18N
        Bzombie1.setFocusable(false);
        Bzombie1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bzombie1ActionPerformed(evt);
            }
        });
        jPanel1.add(Bzombie1);

        Btree.setBackground(new java.awt.Color(0, 0, 0));
        Btree.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Btree.setForeground(new java.awt.Color(255, 0, 51));
        Btree.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\deciduous_tree_50px.png")); // NOI18N
        Btree.setFocusable(false);
        jPanel1.add(Btree);

        Bgun1.setBackground(new java.awt.Color(0, 0, 0));
        Bgun1.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bgun1.setForeground(new java.awt.Color(255, 0, 51));
        Bgun1.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\gun_48px.png")); // NOI18N
        Bgun1.setFocusable(false);
        Bgun1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bgun1ActionPerformed(evt);
            }
        });
        jPanel1.add(Bgun1);

        Bgun.setBackground(new java.awt.Color(0, 0, 0));
        Bgun.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bgun.setForeground(new java.awt.Color(255, 0, 51));
        Bgun.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\no_weapons_48px.png")); // NOI18N
        Bgun.setFocusable(false);
        Bgun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BgunActionPerformed(evt);
            }
        });
        jPanel1.add(Bgun);

        Bbullet.setBackground(new java.awt.Color(0, 0, 0));
        Bbullet.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bbullet.setForeground(new java.awt.Color(255, 0, 51));
        Bbullet.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\bullet_48px.png")); // NOI18N
        Bbullet.setFocusable(false);
        jPanel1.add(Bbullet);

        Bhwall.setBackground(new java.awt.Color(0, 0, 0));
        Bhwall.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bhwall.setForeground(new java.awt.Color(255, 0, 51));
        Bhwall.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\horizontal_line_55px.png")); // NOI18N
        Bhwall.setFocusable(false);
        Bhwall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BhwallActionPerformed(evt);
            }
        });
        jPanel1.add(Bhwall);

        Bvwall.setBackground(new java.awt.Color(0, 0, 0));
        Bvwall.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bvwall.setForeground(new java.awt.Color(255, 0, 51));
        Bvwall.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\vertical_line_55px.png")); // NOI18N
        Bvwall.setFocusable(false);
        Bvwall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BvwallActionPerformed(evt);
            }
        });
        jPanel1.add(Bvwall);

        Bfire.setBackground(new java.awt.Color(0, 0, 0));
        Bfire.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bfire.setForeground(new java.awt.Color(255, 0, 51));
        Bfire.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\Logfire1.gif")); // NOI18N
        Bfire.setFocusable(false);
        Bfire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BfireActionPerformed(evt);
            }
        });
        jPanel1.add(Bfire);

        Bvwall1.setBackground(new java.awt.Color(0, 0, 0));
        Bvwall1.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bvwall1.setForeground(new java.awt.Color(255, 0, 51));
        Bvwall1.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\fence_55px.png")); // NOI18N
        Bvwall1.setFocusable(false);
        Bvwall1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bvwall1ActionPerformed(evt);
            }
        });
        jPanel1.add(Bvwall1);

        Bfood.setBackground(new java.awt.Color(0, 0, 0));
        Bfood.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bfood.setForeground(new java.awt.Color(255, 0, 51));
        Bfood.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\canned_food_48px.png")); // NOI18N
        Bfood.setFocusable(false);
        jPanel1.add(Bfood);

        Bvaccine1.setBackground(new java.awt.Color(0, 0, 0));
        Bvaccine1.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bvaccine1.setForeground(new java.awt.Color(255, 0, 51));
        Bvaccine1.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\syringe_48px.png")); // NOI18N
        Bvaccine1.setFocusable(false);
        jPanel1.add(Bvaccine1);

        Bmedicine.setBackground(new java.awt.Color(0, 0, 0));
        Bmedicine.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 3, 17)); // NOI18N
        Bmedicine.setForeground(new java.awt.Color(255, 0, 51));
        Bmedicine.setIcon(new javax.swing.ImageIcon("C:\\ZUMANS\\images_zumans\\medical_bag_48px.png")); // NOI18N
        Bmedicine.setFocusable(false);
        jPanel1.add(Bmedicine);

        Tcomments.addTab("CHARACTERS", jPanel1);

        Tstatus.setBackground(new java.awt.Color(0, 0, 0));
        Tstatus.setFocusable(false);
        Tstatus.setLayout(new java.awt.GridLayout(2, 0, 0, 3));

        jLabel1.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 0));
        jLabel1.setText("CIVILIANS ALIVE.....->");
        jLabel1.setToolTipText("");
        Tstatus.add(jLabel1);

        TLCC.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLCC.setForeground(new java.awt.Color(255, 0, 0));
        TLCC.setToolTipText("");
        Tstatus.add(TLCC);

        jLabel3.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("POSSESSING  GUN.....->");
        jLabel3.setToolTipText("");
        Tstatus.add(jLabel3);

        TLPG.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLPG.setForeground(new java.awt.Color(255, 0, 0));
        TLPG.setToolTipText("");
        Tstatus.add(TLPG);

        jLabel7.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("ZOMBIES ALIVE.....->");
        jLabel7.setToolTipText("");
        jLabel7.setPreferredSize(new java.awt.Dimension(201, 21));
        Tstatus.add(jLabel7);

        TLZC.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLZC.setForeground(new java.awt.Color(255, 0, 0));
        TLZC.setToolTipText("");
        Tstatus.add(TLZC);

        jLabel5.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 0, 0));
        jLabel5.setText("LEVEL....->");
        jLabel5.setToolTipText("");
        Tstatus.add(jLabel5);

        TLL.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLL.setForeground(new java.awt.Color(255, 0, 0));
        TLL.setToolTipText("");
        Tstatus.add(TLL);

        jLabel15.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 0, 0));
        jLabel15.setText("CIVILIANS SAVED/DIED.....->");
        jLabel15.setToolTipText("");
        Tstatus.add(jLabel15);

        TLCS.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLCS.setForeground(new java.awt.Color(255, 0, 0));
        TLCS.setToolTipText("");
        Tstatus.add(TLCS);

        jLabel9.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setText("BULLETS  COUNT /RANGE.....->");
        jLabel9.setToolTipText("");
        Tstatus.add(jLabel9);

        TLBC.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLBC.setForeground(new java.awt.Color(255, 0, 0));
        TLBC.setToolTipText("");
        Tstatus.add(TLBC);

        jLabel14.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 0, 0));
        jLabel14.setText("NO.OF.ZOMBIES KILLED.....->");
        jLabel14.setToolTipText("");
        Tstatus.add(jLabel14);

        TLZK.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLZK.setForeground(new java.awt.Color(255, 0, 0));
        TLZK.setToolTipText("");
        Tstatus.add(TLZK);

        jLabel17.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 0, 0));
        jLabel17.setText("LIFE PACKAGES....->");
        jLabel17.setToolTipText("");
        Tstatus.add(jLabel17);

        TLLP.setFont(new java.awt.Font("Adobe Caslon Pro", 3, 20)); // NOI18N
        TLLP.setForeground(new java.awt.Color(255, 0, 0));
        TLLP.setToolTipText("");
        Tstatus.add(TLLP);

        Tcomments.addTab("STATUS", Tstatus);

        jPanel7.setBackground(new java.awt.Color(0, 0, 0));
        jPanel7.setFocusable(false);

        BMap.setBackground(new java.awt.Color(0, 0, 0));
        BMap.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 1, 24)); // NOI18N
        BMap.setForeground(new java.awt.Color(255, 0, 51));
        BMap.setText(".MAP.");
        BMap.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 4, true));
        BMap.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BMap.setFocusable(false);
        BMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(342, 342, 342)
                .addComponent(BMap, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(2140, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(BMap, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        Tcomments.addTab("MAP", jPanel7);

        jScrollPane2.setViewportView(Tcomments);

        basePanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 820, 1973, 170));

        jLabel2.setFont(new java.awt.Font("Adobe Caslon Pro Bold", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));
        jLabel2.setText("INSTRUCTIONS :->..................<FOR  PAUSE AND PLAY ,PRESS SPACE BUTTON>................<USE ARROW KEYS TO CONTROL PLAYER MOVEMENTS>................<TO SHOOT ,GET A GUN AND PRESS 'F' KEY>....................");
        jLabel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 0, 51), 2, true));
        basePanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1930, 40));

        getContentPane().add(basePanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        playsound("C:\\ZUMANS\\audios_zumans\\clicks.wav");

    }//GEN-LAST:event_formKeyPressed

    private void basePanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_basePanelKeyPressed
        playsound("C:\\ZUMANS\\audios_zumans\\clicks.wav");
//       
//        }
    }//GEN-LAST:event_basePanelKeyPressed
    int left, right, up, down, pause = 0;
    int[] current = {-1};
    static int v=0,died=0;
    private void LoldtownKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LoldtownKeyPressed
        // TODO add your handling code here:
        // new Timer(400,(ActionEvent e)->{
        // new Timer(0,(ActionEvent e)->{
        playsound("C:\\ZUMANS\\audios_zumans\\clicks.wav");
        Rectangle visible=Loldtown.getVisibleRect();Rectangle bound=Loldtown.getBounds();
        int key = evt.getKeyCode();
        int x = player.pgetposx(), y = player.pgetposy();

        int l = 1;
        if (key == VK_SPACE) {
            if (pause == 1) {
                pause = 0;
            } else {
                pause = 1;
            }
            if (v == 1 || died ==1) {

            new ZUMANS_MENU_PAGE().setVisible(true);
            this.dispose();
        }
        }
        if (pause == 0) {
            if (key == VK_LEFT) {
                visible.x=visible.x-15;
                psetmove((x - l), (y));
            }
            if (key == VK_RIGHT) {
                visible.x=visible.x+15;
                psetmove((x + l), (y));
            }
            if (key == VK_UP) {
                visible.y=visible.y-(int)(player._y*(2));
                psetmove((x), (y - l));
            }
            if (key == VK_DOWN) {                
                visible.y=visible.y+(int)(player._y*2);
                psetmove((x), (y + l));
            }
            
            Loldtown.scrollRectToVisible(visible);

            if (evt.getKeyChar() == 'F' || evt.getKeyChar() == 'f') {
                if (current[0] == -1) {
                    Commentbox.setText(Commentbox.getText() + "\ntake a gun to shoot");
                } else {
                    for (int jk = 0; jk < guns.get(current[0]).gkill; jk++) {
                        if (guns.get(current[0]).gbulletr != 0) {
                            shoot();
                            guns.get(current[0]).gbulletr--;
                            if ((guns.get(current[0]).gsymbol == 'P' || guns.get(current[0]).gsymbol == 'G') && jk % 2 == 0) {
                                playsound("C:\\ZUMANS\\audios_zumans\\shortpistal.wav");
                            }
                            if (guns.get(current[0]).gsymbol == 'S') {
                                playsound("C:\\ZUMANS\\audios_zumans\\snipper.wav");
                            }
                            if (guns.get(current[0]).gsymbol == 'M' && jk == 0) {
                                playsound("C:\\ZUMANS\\audios_zumans\\m14.wav");
                            }

                        } else {

                            Commentbox.setText(Commentbox.getText() + "\nOops,there is no bullet");
                            //system("pause");
                            return;
                        }
                    }
                    Commentbox.setText(Commentbox.getText() + "\nno.of " + guns.get(current[0]).gname + " bullets you have : " + guns.get(current[0]).gbulletr);
                    //system("pause");
                }
            }
        }

        printlevel();
        //}).start();
    }//GEN-LAST:event_LoldtownKeyPressed

    private void LoldtownKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_LoldtownKeyReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_LoldtownKeyReleased

    private void BvwallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BvwallActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BvwallActionPerformed

    private void BhwallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BhwallActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BhwallActionPerformed

    private void BgunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BgunActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BgunActionPerformed

    private void Bgun1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bgun1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bgun1ActionPerformed

    private void BplayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BplayerActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_BplayerActionPerformed

    private void BMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BMapActionPerformed
        // TODO add your handling code here:
        ZUMANS_MAP_PAGE BM = new ZUMANS_MAP_PAGE();
        BM.setVisible(true);
        new Timer(500, (ActionEvent e) -> {
            BM.Mapvalue(fileline);
        }).start();
    }//GEN-LAST:event_BMapActionPerformed

    private void BzombieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BzombieActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BzombieActionPerformed

    private void Bzombie1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bzombie1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bzombie1ActionPerformed

    private void Bvwall1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bvwall1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_Bvwall1ActionPerformed

    private void BfireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BfireActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BfireActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        clipl.stop();
    }//GEN-LAST:event_formWindowClosed
    
    Clip clipl=null;
    public void playsoundl(String url) 
    {
        if(volumep==1){
        
        File audioFile = new File(url);

        try {
//        //URL urll=new URL(url);
//        //urll.openConnection();
//        
//            //    AudioInputStream audio = AudioSystem.getAudioInputStream(urll.openStream());
            AudioInputStream audio = AudioSystem.getAudioInputStream(audioFile);
            clipl = AudioSystem.getClip();
            clipl.open(audio);
            clipl.loop(Clip.LOOP_CONTINUOUSLY);
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        }}
    }

    public void playsound(String url) {
        
        
        if(volumep==1){
            File audioFile = new File(url);

        try {
            AudioInputStream audio = AudioSystem.getAudioInputStream(audioFile);
            Clip clip = AudioSystem.getClip();
            clip.open(audio);
            clip.start();
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
        }
        }
    }

    static int g, h, gh, hg, gg, gk, gkg, t, ll, ty = -1, mm, aa = 0, nn, bb = 0, cc = 0, oo;
    static int total_zombies = 0, total_zombiesB = -1;

    void psetmove(int x, int y) {
        char tile;
        int px, py;

        ex = x;
        ey = y;
        tile = fileline.get(y).charAt(x);

        px = player.pgetposx();
        py = player.pgetposy();
        if (tile == 'B') {
            g = 1;
            t = 0;
        }
        if (tile == 'L') {
            gk = 1;
            t = 0;
        }
        if (tile == 'F') {
            gkg = 1;
            t = 0;
        }
        if (tile == 'P' || tile == 'G' || tile == 'S' || tile == 'M') {
            ll++;
            t = 0;

        }

        switch (tile) {

            case '*':
                //	to %......
                fileset(y, x, '@');

                if (cc == 0) {
                    fileset(py, px, ' ');
                    cc++;
                } else {
                    fileset(py, px, '*');
                }
                oo = 1;
                player.psetpos(x, y);
                break;

            case '%':
                //	to %......
                fileset(y, x, '@');
                if (aa == 0) {
                    fileset(py, px, ' ');
                    aa++;
                } else {
                    fileset(py, px, '%');
                }
                mm = 1;
                player.psetpos(x, y);

                break;

            case ' ':

                fileset(y, x, '@');
                // %to	......
                if (mm == 1) {
                    fileset(py, px, '%');
                    mm = 0;
                    aa = 0;
                } else if (oo == 1) {
                    fileset(py, px, '*');
                    oo = 0;
                    cc = 0;
                } else {
                    fileset(py, px, ' ');
                }
                if (g == 1) {
                    t++;
                    if (t > 2) {
                        {
                            if (bulletpp() == 1) {
                                g = 0;
                            }
                        }
                    }
                }
                if (gk == 1) {
                    t++;
                    if (t > 2) {
                        {
                            if (lifepp() == 1) {
                                gk = 0;
                            }
                        }
                    }
                }
                if (gkg == 1) {
                    t++;
                    if (t > 2) {
                        {
                            if (foodpp() == 1) {
                                gkg = 0;
                            }
                        }
                    }
                }
                if (ll >= 0) {

                    if (gunpp() == 1) {
                        ll--;
                    }

                }

                player.psetpos(x, y);

                break;
            case 'B':

                fileset(y, x, '@');
                fileset(py, px, ' ');
                bullets.pop();
                player.psetpos(x, y);
                if (current[0] != -1) {
                    Commentbox.setText(Commentbox.getText() + "\nyou took the bullet");
                    guns.get(current[0]).gbulletr = guns.get(current[0]).gbullet;
                    playsound("C:\\ZUMANS\\audios_zumans\\Gun reload.wav");
                } else {
                    Commentbox.setText(Commentbox.getText() + "\nTake the gun first to get reloaded!!!");
                }
                //system("pause");
                break;

            case 'L':

                fileset(y, x, '@');
                fileset(py, px, ' ');
                player.lx = 0;
                player.ly = 0;
                player.psetpos(x, y);
                Commentbox.setText(Commentbox.getText() + "\nyou took the first aid\t");
                player._phealth = 1000;
                Commentbox.setText(Commentbox.getText() + "\nyour current health is "+player._phealth );
                Life_pakage++;
                break;

            case 'F':

                fileset(y, x, '@');
                fileset(py, px, ' ');
                //bullets.pop_back();
                //player.fsetpos(0,0);
                player.fx = 0;
                player.fy = 0;
                player.psetpos(x, y);
                Commentbox.setText(Commentbox.getText() + "\nyou had the food\t");
                player._phealth += 200;
                Commentbox.setText(Commentbox.getText() + "\nyour current health is "+player._phealth );
                //system("pause");
                break;

            case 'P':
                fileset(y, x, '~');
                current[0] = 0;
                guns.get(current[0]).gbulletr = guns.get(current[0]).gbullet;
                Commentbox.setText(Commentbox.getText() + "\nyou took the " + guns.get(current[0]).gname);
                playsound("C:\\ZUMANS\\audios_zumans\\Gun reload.wav");

                break;
            case 'G':
                fileset(y, x, '~');
                current[0] = 1;
                guns.get(current[0]).gbulletr = guns.get(current[0]).gbullet;
                Commentbox.setText(Commentbox.getText() + "\nyou took the " + guns.get(current[0]).gname);
                playsound("C:\\ZUMANS\\audios_zumans\\Gun reload.wav");
                break;
            case 'S':
                fileset(y, x, '~');
                current[0] = 2;
                guns.get(current[0]).gbulletr = guns.get(current[0]).gbullet;
                Commentbox.setText(Commentbox.getText() + "\nyou took the " + guns.get(current[0]).gname);
                playsound("C:\\ZUMANS\\audios_zumans\\Gun reload.wav");
                break;
            case 'M':

                fileset(y, x, '~');
                current[0] = 3;
                guns.get(current[0]).gbulletr = guns.get(current[0]).gbullet;
                Commentbox.setText(Commentbox.getText() + "\nyou took the " + guns.get(current[0]).gname);
                playsound("C:\\ZUMANS\\audios_zumans\\Gun reload.wav");
                break;

            case '#':
                Commentbox.setText(Commentbox.getText() + "\nyou can't move there");
                //system("pause");

                break;
            case '-':

                fileset(y, x, '@');
                // % to -......
                /*if (mm == 1) {
			fileline[py][px] = '%';
			mm = 0; aa = 0;
		}*///  to -
                if (bb == 0) {
                    fileset(py, px, ' ');
                    bb++;
                } else {
                    fileset(py, px, '-');
                }
                nn = 1;
                player.psetpos(x, y);

                break;

            case 'Z':
                playsound("C:\\ZUMANS\\audios_zumans\\Zombiebit0.wav");
                battlestarts();
                break;

            case 'V':
                v = 1;
                Commentbox.setText(Commentbox.getText() + "\nHurray!!! you found the vaccine,now we can turn zombies to humans");
                
                for (int i = 0; i < enemies.size(); i++) {
                    
                    int endx, endy;

                    endx = enemies.get(i).egetposx();
                    endy = enemies.get(i).egetposy();

                    fileset(endy, endx, 'H');
                    if (enemies.get(i)._esex == 1) {
                        citizens.push(new citizen("HUMAN", 150, 13, 'H', 10, 0, 1));
                    } else {
                        citizens.push(new citizen("HUMAN", 150, 13, 'H', 10, 0, 0));
                    }
                    citizens.getFirst().hsetpos(endx, endy);
                    enemies.remove(i);
                    i--;

                }
                int t;

                
            //    printlevel();
//                try {
//                    Thread.currentThread().sleep(2000);
//                } catch (InterruptedException ex) {
//                    Logger.getLogger(ZUMANS.class.getName()).log(Level.SEVERE, null, ex);
//                }

                break;
        }

        playsound("C:\\ZUMANS\\audios_zumans\\Single-footstep-in-grass-F-www.fesliyanstudios.com.wav");
        


    }

    void battlestarts() {
        char tile;
        int i;
        int attack, defend, health;
        for (i = 0; i < enemies.size(); i++) {
            if (ex == enemies.get(i).egetposx() && ey == enemies.get(i).egetposy()) {

                //Battle starts....
                //player attack...
                attack = rand.nextInt(player._pattack);
                Commentbox.setText(Commentbox.getText() + "\nyou have attacked the " + enemies.get(i)._ename + " with the power of " + attack);

                enemies.get(i)._ehealth -= (attack);

                //system("pause");
                //.............................................................................................................................
                //enemy attack...
                if (enemies.get(i)._ehealth > 0) {
                    attack = rand.nextInt(enemies.get(i)._eattack);
                    Commentbox.setText(Commentbox.getText() + "\n" + enemies.get(i)._ename + "has attacked you with the power of " + attack);

                    //player defend...
                    defend = rand.nextInt(abs(attack));
                    Commentbox.setText(Commentbox.getText() + "\nyou have defended  the " + enemies.get(i)._ename + "'s attack with the power of " + defend);

                    player._phealth -= (attack - defend);
                    Commentbox.setText(Commentbox.getText() + "\nyour health is " + player._phealth);
                    Commentbox.setText(Commentbox.getText() + "\t" + enemies.get(i)._ename + " health is " + enemies.get(i)._ehealth);

                    if (player._phealth < 0) {
                        Commentbox.setText(Commentbox.getText() + "\nyou get killed");
                        fileset(player._y, player._x, 'X');
                        player._y=0; player._x=0;
                        died=1;
                    }
                }

                if (enemies.get(i)._ehealth <= 0) {
                    Commentbox.setText(Commentbox.getText() + "\nyou killed the " + enemies.get(i)._ename);
                    fileset(ey, ex, ' ');
                    enemies.set(i, enemies.getLast());
                    enemies.pop();

                    player._pxp += rand.nextInt(epxp);
                    i--;
                    if (player._pxp >= 100) {
                        player._plevel++;
                        Commentbox.setText(Commentbox.getText() + "\nyour level has increased to =  " + player._plevel);
                        player._pxp = 0;
                    }
                    //system("pause");
                    return;
                }
            }
        }

    }

    void shoot() {

        int currentrange;
        currentrange = guns.get(current[0]).grange;
        int i, l, t;
        int x = 0, y = 0, xx, yy;

        i = isthereenemy(currentrange);

        if (i != 0) {
            t = i - 1;
            for (i = 0; i < enemies.size(); i++) {

                if (i == t) {
                    x = enemies.get(i).egetposx();
                    y = enemies.get(i).egetposy();
                }

            }

            int attack;
            attack = rand.nextInt(guns.get(current[0]).gattack);

            enemies.get(t)._ehealth -= attack;
            Commentbox.setText(Commentbox.getText() + "\nYou have shooted the Zombie with the power of " + attack);

            if (enemies.get(t)._ehealth <= 0) {
                Commentbox.setText(Commentbox.getText() + "\nyou killed the " + enemies.get(t)._ename + " with the" + guns.get(current[0]).gname);
                fileset(y, x, ' ');
                //enemies.get(t) = enemies.getLast();
                enemies.remove(t);
                //system("pause");

                player._pxp += rand.nextInt(epxp);

                if (player._pxp >= 100) {
                    player._plevel++;
                    Commentbox.setText(Commentbox.getText() + "\nyour level has increased to " + player._plevel);
                    player._pxp = 0;
                    //system("pause");
                }
            } else {
                Commentbox.setText(Commentbox.getText() + "\nthe " + enemies.get(t)._ename + "'s health is " + enemies.get(t)._ehealth);
                //system("pause");
            }
        }

    }

    void fileset(int y, int x, char cc) {
        String s = fileline.get(y);
        char[] ca = new char[200];
        int temp = 0;
        for (char c : s.toCharArray()) {
            if (temp == x) {
                c = cc;
            }
            ca[temp] = c;
            temp++;
        }
        String st = new String(ca);
        fileline.set(y, st);
    }

    int isthereenemy(int range) {
        int input;
        int j, i, jj, sdi = 0;
        Stack<Integer> dis = new Stack<>();
        Stack<Integer> diss = new Stack<>();

        for (i = 0; i != enemies.size(); i++) {

            int x;
            int y;

            x = enemies.get(i).egetposx();
            y = enemies.get(i).egetposy();
            dx = x - player.pgetposx();
            dy = y - player.pgetposy();

            adx = abs(dx);
            ady = abs(dy);

            jj = adx + ady;
            dis.push(jj);
        }
        diss.addAll(dis);

        for (int t = 0; t < dis.size(); t++) {
            for (int tt = 0; tt < dis.size(); tt++) {
                if (dis.get(t) < dis.get(tt)) {
                    int temp = dis.get(t);
                    dis.set(t, dis.get(tt));
                    dis.set(tt, temp);

                }
            }
        }

        for (i = 0; i < dis.size(); i++) {
            if (diss.get(i) == dis.get(0)) {

                sdi = i;
                break;
            }
        }

        if (enemies.size() != 0) {
            Commentbox.setText(Commentbox.getText() + "\nthere is an enemy at the distance of " + diss.get(sdi));
            if (diss.get(sdi) <= range) {

                return (sdi + 1);

            } else {
                Commentbox.setText(Commentbox.getText() + "\nso,noone is in the range\n");
                //system("pause");
                return 0;
            }
        } else if (enemies.size() == 0) {
            Commentbox.setText(Commentbox.getText() + "\nthere are nomore zombies to shoot\n");
            //system("pause");
            return 0;
        }
        return 0;
    }

    public LinkedList<String> fileline = new LinkedList<>();

    public void fileinit() {
        File f = new File("C:\\ZUMANS\\map_zumans\\omg.txt");
        try {

            Scanner sc = new Scanner(f);
            while (sc.hasNextLine()) {
                fileline.add(sc.nextLine());
            }

//            char c='4';
//            Iterator it=fileline.iterator();
//            it.next="a";
        } catch (FileNotFoundException e) {
            System.out.println("a");
        }
    }
    int Px, Py, Sx, Sy, Mx, My, Gx, Gy, Bx, By;

    public void processline() {
        char tile;
            jScrollPane1.getVerticalScrollBar().setUnitIncrement(30);
        player.init("Player", 1, 70, 20, 25, 1000, 10);
        for (int i = 0; i < fileline.size(); i++) {
            for (int j = 0; j < fileline.get(i).length(); j++) {
                tile = fileline.get(i).charAt(j);
                switch (tile) {
                    case '@':
                        player.psetpos(j, i);
                        break;
                    case 'Z':
                        if (z2 == 1) {
                            enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 0));
                            z2 = 0;
                        } else {
                            enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 1));
                            z2 = 1;
                        }
                        enemies.getFirst().esetpos(j, i);
                        break;
                    case 'H':
                        if (hs2 == 1) {
                            citizens.push(new citizen("HUMAN", 150, 13, 'H', 10, 0, 1));
                            hs2 = 0;
                        } else {
                            citizens.push(new citizen("HUMAN", 150, 13, 'H', 10, 0, 0));
                            hs2 = 1;
                        }
                        citizens.getFirst().hsetpos(j, i);
                        break;
                    case 'E':
                        citizens.push(new citizen("ENGINEER", 150, 9, 'E', 10, 0, 1));
                        citizens.getFirst().hsetpos(j, i);
                        break;
                    case 'D':
                        citizens.push(new citizen("DOCTOR", 150, 9, 'D', 10, 0, 1));
                        citizens.getFirst().hsetpos(j, i);
                        break;
                    case 'P':
                        guns.add(new Gun("PISTAL", 0, 180, 1, 20, 20, 20, 'P', 0));
                        guns.getLast().gsetpos(j, i);
                        fileset(i, j, '~');
                        break;
                    case 'G':
                        guns.add(new Gun("SHORT GUN", 0, 220, 3, 15, 15, 15, 'G', 0));
                        guns.getLast().gsetpos(j, i);
                        fileset(i, j, '~');
                        break;
                    case 'S':
                        guns.add(new Gun("SNIPPER", 0, 500, 1, 30, 10, 10, 'S', 0));
                        guns.getLast().gsetpos(j, i);
                        fileset(i, j, '~');
                        ;
                        break;
                    case 'M':
                        guns.add(new Gun("M-16 ", 0, 220, 5, 25, 20, 20, 'M', 0));
                        guns.getLast().gsetpos(j, i);
                        fileset(i, j, '~');
                        break;
                    case 'B':

                        bullets.add(new Bullet("Bullet", 'B'));
                        bullets.getFirst().bsetpos(j, i);
                        Bx = j;
                        By = i;
                        break;
                    case 'L':
                        player.plife("LIFE");
                        player.lx = j;
                        player.ly = i;
                        break;
                    case 'F':
                        player.pfood("FOOD");
                        player.fx = j;
                        player.fy = i;
                        break;
                    case 'V':
                        mx = j;
                        my = i;
                        fileset(i, j, ' ');
                        break;

                    default:

                        break;
                }
            }
        }
        System.out.println(ready_gun);
        guns.get(ready_gun).gtaken = 1;
        fileset(guns.get(g).gy, guns.get(g).gx, guns.get(g).gsymbol);

    }
    int tt;

    public void printlevel() {

        char tile;
        int stat = 0, count;
        count = 0;
        int tempsize = buttons.size();
        for (int i = 0; i < tempsize; i++) {
            buttons.get(i).setVisible(false);
        }
        buttons.clear();
        lae.clear();
        Loldtown.removeAll();
        int z, c, g;
        z = 0;
        c = 0;
        g = 0;
        for (int i = 0; i < fileline.size(); i++) {
            for (int j = 0; j < fileline.get(i).length(); j++) {
                tile = fileline.get(i).charAt(j);

                switch (tile) {
                    case '@':
                        buttons.push(Button("@", 56, 58, j, i, 0, 0, Bplayer.getIcon()));
                        break;
                    case 'Z':
                        for (int cc = 0; cc < enemies.size(); cc++) {
                            if (j == enemies.get(cc).egetposx() && i == enemies.get(cc).egetposy()) {
                                if (enemies.get(cc)._esex == 1) {
                                    buttons.push(Button("Z", 56, 58, j, i, cc, 10, Bzombie.getIcon()));
                                } else {
                                    buttons.push(Button("Z", 56, 58, j, i, cc, 10, Bzombie1.getIcon()));
                                }
                            }
                        }
                        break;
                    case 'H':
                    case 'E':
                    case 'D':
                        if (tile == 'H') {
                            for (int cc = 0; cc < citizens.size(); cc++) {
                                if (j == citizens.get(cc).hgetposx() && i == citizens.get(cc).hgetposy()) {
                                    if (citizens.get(cc).hsex == 1) {
                                        buttons.push(Button("H", 56, 58, j, i, cc, 10, Bhuman.getIcon()));
                                    } else {
                                        buttons.push(Button("H", 56, 58, j, i, cc, 10, Bhuman1.getIcon()));
                                    }
                                }
                            }
                            break;
                        }
                        if (tile == 'E') {
                            for (int cc = 0; cc < citizens.size(); cc++) {
                                if (j == citizens.get(cc).hgetposx() && i == citizens.get(cc).hgetposy()) {
                                    buttons.push(Button("E", 56, 58, j, i, cc, 10, BEngineer.getIcon()));
                                    break;
                                }
                            }
                        }
                        if (tile == 'D') {
                            for (int cc = 0; cc < citizens.size(); cc++) {
                                if (j == citizens.get(cc).hgetposx() && i == citizens.get(cc).hgetposy()) {
                                    buttons.push(Button("D", 56, 58, j, i, cc, 10, Bbiotech.getIcon()));
                                }
                            }
                        }
                        break;

                    case 'P':
                    case 'G':
                    case 'S':
                    case 'M':
                        if (tile == guns.get(ready_gun).gsymbol) {
                            buttons.push(Button(guns.get(ready_gun).gname, 45, 45, j, i, ready_gun, 0, Bgun1.getIcon()));
                            guns.get(ready_gun).gtaken = 0;
                        }

                        break;
                    case '~':
                        for (int temp = 0; temp < guns.size(); temp++) {

                            if (j == guns.get(temp).gx && i == guns.get(temp).gy) {
                                buttons.push(Button("~", 45, 45, j, i, temp, 0, Bgun.getIcon()));
                                break;
                            }

                        }

                        break;
                    case 'B':
                        buttons.push(Button("B", 43, 43, j, i, 0, 0, Bbullet.getIcon()));
                        break;
                    case 'L':
                        buttons.push(Button("L", 46, 46, j, i, 0, 0, Bmedicine.getIcon()));
                        break;
                    case 'F':
                        buttons.push(Button("F", 46, 46, j, i, 0, 0, Bfood.getIcon()));
                        break;
                    case '%':
                        //if (stat==0)
                        labels.push(new Label("T", 43, 43, j * 25, i * 44, Btree.getIcon(), Loldtown));
                        break;
                    case '#':
                        // if (stat==0)
                        labels.push(new Label("VW", 45, 37, j * 25, i * 44, Bvwall.getIcon(), Loldtown));
                        break;
                    case '^':
                        // if (stat==0)
                        labels.push(new Label("HW", 10, 53, j * 25, i * 44, Bhwall.getIcon(), Loldtown));
                        break;
                    case 'V':
                        if (player._plevel >= winlevel);
                        buttons.push(Button("V", 46, 46, j, i, 0, 0, Bvaccine1.getIcon()));
                        break;
                    case '*':
                        labels.push(new Label("HW", 10, 53, j * 25, i * 44, Bvwall1.getIcon(), Loldtown));
                        break;
                    case 'W':
                        labels.push(new Label("W", 42, 53, j * 25, i * 44, Bfire.getIcon(), Loldtown));
                        break;
                    case 'X':
                        labels.push(new Label("X", 42, 42, j * 25, i * 44, new ImageIcon("C:\\ZUMANS\\images_zumans\\flower_55px.png"), Loldtown));
                        break;
                    default:
                        for (int asc = 97; asc <= 122; asc++) {
                            if (tile == asc || tile == 95) {
                                lae.add(new JLabel((tile + "").toUpperCase()));
                                Loldtown.add(lae.getLast());
                                lae.getLast().setFont(new Font("Adobe Caslon Pro Bold", 1, 24));
                                lae.getLast().setForeground(new Color(0, 0, 0));
                                lae.getLast().setBackground(new Color(255, 0, 0));
                                lae.getLast().setSize(45, 37);
                                lae.getLast().setLocation(j * 25, i * 44);
                                break;
                            }
                        }

                        break;
                }
                count++;
            }
        }
        if (stat == 0) {
            stat++;
        }
        // }}).start();
    }

    JButton Button(String N, int w, int h, int X, int Y, int Id, int points, Icon I) {
        JButton BP = new JButton();
        final int qdx, qdy;
        final int cs = citizens.size();
        final int es = enemies.size();
        qdx = X * 25;
        qdy = Y * 44;
        BP.setIcon(I);
        BP.setSize(w, h);
        BP.setLocation(qdx, qdy);
        BP.setBorder(null);
        BP.setBackground(new Color(0, 0, 0, 0));
        BP.setFocusable(false);
        Loldtown.add(BP);
        if (pause == 1) {
            BP.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    ZUMANS_CHARACTER_PAGE a = new ZUMANS_CHARACTER_PAGE();
                    a.setVisible(true);
                    if (N == "Z" && es == enemies.size()) {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1, enemies.get(Id)._ehealth, 1, points, true, enemies.get(Id)._ename, BP.getIcon());

                    }
                    if (N == "@") {
                        a.setPage(0, false, 1, player._phealth, 1, 0, true, player._pname, BP.getIcon());
                    }
                    if ((N == "H" || N == "E" || N == "D")) {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1,
                                 citizens.get(Id).hhealth,
                                 1,
                                 points,
                                 true, citizens.get(Id).hname,
                                 BP.getIcon());
                    }
                    //setPage(int ldistance,boolean ldistanceT,int lhealth,int lpointsT,int lpoints,boolean lwhoT,String lwho,Icon limage)    
                    if (N == "PISTAL" || N == "SHORT GUN" || N == "SNIPPER" || N == "M-16") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 0, guns.get(Id).grange, 0, guns.get(Id).gbulletr, false, guns.get(Id).gname, BP.getIcon());
                    }
                    if (N == "~") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 0, guns.get(Id).grange, 0, guns.get(Id).gbulletr, false, guns.get(Id).gname, BP.getIcon());
                    }
                    if (N == "B") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1, guns.get(Id).grange, 0, 1000, false, "Bullets", BP.getIcon());
                    }

                    if (N == "L") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1, player._phealth, -1, 0, false, "Life", BP.getIcon());
                    }
                    if (N == "F") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1, 60, -1, 0, false, "Food", BP.getIcon());
                    }
                    if (N == "V") {
                        a.setPage(abs(X - player._x) + abs(Y - player._y), true, 1, 1000, -1, 0, false, "Vaccine", BP.getIcon());
                    }

                }
            });
            Loldtown.setFocusable(true);
        }
        return BP;
    }

    int gunpp() {

        int i, j;;
        int g = rand.nextInt(4);;
        char tile = guns.get(g).gsymbol;

        if (guns.get(ready_gun).gtaken == 0 && current[0] == ready_gun && guns.get(ready_gun).gsymbol != tile) {

            switch (tile) {
                case 'P':
                    if (addfac(11) == 1) {
                        fileset(guns.get(g).gy, guns.get(g).gx, guns.get(g).gsymbol);
                        guns.get(g).gtaken = 1;
                        ready_gun = 0;
                        return 1;
                    }
                    break;

                case 'G':
                    if (addfac(11) == 1) {
                        fileset(guns.get(g).gy, guns.get(g).gx, guns.get(g).gsymbol);
                        guns.get(g).gtaken = 1;
                        ready_gun = 1;
                        return 1;
                    }
                    break;

                case 'S':
                    if (addfac(11) == 1) {
                        guns.get(g).gtaken = 1;
                        fileset(guns.get(g).gy, guns.get(g).gx, guns.get(g).gsymbol);
                        ready_gun = 2;
                        return 1;
                    }
                    break;

                case 'M':
                    if (addfac(11) == 1) {
                        fileset(guns.get(g).gy, guns.get(g).gx, guns.get(g).gsymbol);
                        guns.get(g).gtaken = 1;
                        ready_gun = 3;
                        return 1;
                    }
                    break;
            }
        }
        return 0;
    }

    int addfac(int j) {

        if (rand.nextInt(j) == 1) {
            return 1;
        }

        return 0;

    }

    void moveenemy() {

        int input;
        int i, j;

        for (i = 0; i < enemies.size(); i++) {
            input = aienemy(i);
            int x;
            int y;
            x = enemies.get(i).egetposx();
            y = enemies.get(i).egetposy();

            switch (input) {
                case 0:
                    esetmove(x, y - 1, i);
                    break;
                case 1:
                    esetmove(x, y + 1, i);
                    break;
                case 2:
                    esetmove(x - 1, y, i);
                    break;
                case 3:
                    esetmove(x + 1, y, i);
                    break;
                default:
                    break;

            }
        }
       // printlevel();
    }

    int aienemy(int i) {

        int input;
        int j;

        int x;
        int y;
        x = enemies.get(i).egetposx();
        y = enemies.get(i).egetposy();

        dx = x - player.pgetposx();
        dy = y - player.pgetposy();

        adx = abs(dx);
        ady = abs(dy);

        d = adx + ady;

        if (d < player._prange - 15) {

            if (adx < ady) {
                if (adx != 0) {
                    if (dx < 0) {
                        input = 3;
                        return input;
                    } else if (dx > 0) {
                        input = 2;
                        return input;
                    }
                } else if (adx == 0) {
                    if (dy < 0) {
                        input = 1;
                        return input;
                    } else if (dy > 0) {
                        input = 0;
                        return input;
                    }
                }
            } else if (ady <= adx) {
                if ((ady != 0)) {
                    if (dy < 0) {
                        input = 1;
                        return input;
                    } else if (dy > 0) {
                        input = 0;
                        return input;
                    }
                } else if (ady == 0) {
                    if (dx < 0) {
                        input = 3;
                        return input;
                    } else if (dx > 0) {
                        input = 2;
                        return input;
                    }
                }
            }
        }

        for (i = 0; i < citizens.size(); i++) {

            hdx = x - citizens.get(i).hgetposx();
            hdy = y - citizens.get(i).hgetposy();

            hadx = abs(hdx);
            hady = abs(hdy);

            hd = hadx + hady;

            if (hd < citizens.get(i).hrange) {

                if (hadx < hady) {
                    if (hadx != 0) {
                        if (hdx < 0) {
                            input = 3;
                            return input;
                        } else if (hdx > 0) {
                            input = 2;
                            return input;
                        }
                    } else if (hadx == 0) {
                        if (hdy < 0) {
                            input = 1;
                            return input;
                        } else if (hdy > 0) {
                            input = 0;
                            return input;
                        }
                    }
                } else if (hady <= hadx) {
                    if ((hady != 0)) {
                        if (hdy < 0) {
                            input = 1;
                            return input;
                        } else if (hdy > 0) {
                            input = 0;
                            return input;
                        }
                    } else if (hady == 0) {
                        if (hdx < 0) {
                            input = 3;
                            return input;
                        } else if (hdx > 0) {
                            input = 2;
                            return input;
                        }
                    }
                }
            }
        }

        input = rand.nextInt(4);
        return input;

    }

    void esetmove(int x, int y, int i) {
        char tile;
        int px, py;
        ex = x;
        ey = y;
        tile = fileline.get(y).charAt(x);
        px = enemies.get(i).egetposx();
        py = enemies.get(i).egetposy();
        switch (tile) {

            case ' ':

                fileset(y, x, enemies.get(i)._symbol);
                fileset(py, px, ' ');
                enemies.get(i).esetpos(x, y);
                break;

            case 'H':
            case 'E':
            case 'D':
                playsound("C:\\ZUMANS\\audios_zumans\\Zombiebit0.wav");
                int t;
                for (t = 0; t < citizens.size(); t++) {
                    if (citizens.get(t).hgetposx() == x && citizens.get(t).hgetposy() == y) {

                        if (citizens.get(t).hsex == 0) {
                            enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 0));
                        } else {
                            enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 1));
                        }

                        enemies.getFirst().esetpos(x, y);
                        citizens.remove(t);
                        citizens_died++;
                        t--;
                        break;
                    }
                    // printlevel();
                }
                break;

            case '@':
                playsound("C:\\ZUMANS\\audios_zumans\\Zombiebit0.wav");
                ebattlestarts(i);
                break;
        }
    }

    void ebattlestarts(int i) {

        char tile;
        int attack, defend, health;
        int n, m;

        //Battle starts....
        //enemy attack...
        attack = rand.nextInt(enemies.get(i)._eattack);
        Commentbox.setText(Commentbox.getText() + "\n" + enemies.get(i)._ename + " has attacked you with the power of " + attack);

        //player defend...
        player._phealth -= (attack);
        if (player._phealth < 0) {
            fileset(player._y, player._x, 'X');
            Commentbox.setText(Commentbox.getText() + "\nyou get killed");
            player._y=0; player._x=0;
            died=1;
        }
        //.............................................................................................................................
        //player attack...

        attack = rand.nextInt(player._pattack);
        Commentbox.setText(Commentbox.getText() + "\nyou have attacked the " + enemies.get(i)._ename + " with the power of " + attack);

        enemies.get(i)._ehealth -= (attack);
        if (enemies.get(i)._ehealth < 0) {
            Commentbox.setText(Commentbox.getText() + "\nyou killed the  " + enemies.get(i)._ename);

            n = enemies.get(i).egetposx();
            m = enemies.get(i).egetposy();
            fileset(m, n, ' ');
            enemies.remove(i);
            i--;
            player._pxp += rand.nextInt(epxp);
            if (player._pxp >= 100) {
                player._plevel++;
                Commentbox.setText(Commentbox.getText() + "\nyour level has increased to " + player._plevel);
                player._pxp = 0;
            }
            //system("pause");
            return;
        }
        Commentbox.setText(Commentbox.getText() + "\tyour health is " + player._phealth);
        Commentbox.setText(Commentbox.getText() + "\n" + enemies.get(i)._ename + " health is " + enemies.get(i)._ehealth);
        //.............................................................................................................................

        //system("pause");
    }

    void movehuman() {
        int input;
        int i, j;

        for (i = 0; i < citizens.size(); i++) {
            input = aihuman(i);
            int x;
            int y;
            x = citizens.get(i).hgetposx();
            y = citizens.get(i).hgetposy();

            switch (input) {
                case 0:
                    hsetmove(x, y - 1, i);
                    break;
                case 1:
                    hsetmove(x, y + 1, i);
                    break;
                case 2:
                    hsetmove(x - 1, y, i);
                    break;
                case 3:
                    hsetmove(x + 1, y, i);
                    break;
                default:
                    break;

            }
        }
       // printlevel();
    }

    int aihuman(int i) {

        int input;
        int j;

        int x;
        int y;
        x = citizens.get(i).hgetposx();
        y = citizens.get(i).hgetposy();

        dx = x - player.pgetposx();
        dy = y - player.pgetposy();

        if (dx < 0) {
            dx += 1;
        }
        if (dx > 0) {
            dx -= 1;
        }
        if (dy < 0) {
            dy += 1;
        }
        if (dy > 0) {
            dy -= 1;
        }
        adx = abs(dx);
        ady = abs(dy);

        d = adx + ady;

        if (d < (10)) {

            if (adx < ady) {
                if (adx != 0) {
                    if (dx < 0) {
                        input = 3;
                        return input;
                    } else if (dx > 0) {
                        input = 2;
                        return input;
                    }
                } else if (adx == 0) {
                    if (dy < 0) {
                        input = 1;
                        return input;
                    } else if (dy > 0) {
                        input = 0;
                        return input;
                    }
                }
            } else if (ady <= adx) {
                if ((ady != 0)) {
                    if (dy < 0) {
                        input = 1;
                        return input;
                    } else if (dy > 0) {
                        input = 0;
                        return input;
                    }
                } else if (ady == 0) {
                    if (dx < 0) {
                        input = 3;
                        return input;
                    } else if (dx > 0) {
                        input = 2;
                        return input;
                    }
                }
            }
        } else {

            return rand.nextInt(4);
        }
        return 0;
    }
    int asd = 0, dsa = 0;
    int citizens_saved = 0;
    int citizens_died = 0;
    int Life_pakage = 0;

    void hsetmove(int x, int y, int i) {
        char tile;
        int px, py;

        tile = fileline.get(y).charAt(x);

        px = citizens.get(i).hgetposx();
        py = citizens.get(i).hgetposy();
        switch (tile) {

            case ' ':

                fileset(y, x, citizens.get(i).hsymbol);
                fileset(py, px, ' ');
                citizens.get(i).hsetpos(x, y);
                break;

            case '*':
                citizens_saved++;
                player._plevel++;
                Commentbox.setText(Commentbox.getText() + "\nyour level has increased : " + player._plevel);
                citizens.remove(i);
                fileset(py, px, ' ');
                break;

            case 'Z':
                playsound("C:\\ZUMANS\\audios_zumans\\Zombiebit0.wav");
                if (citizens.get(i).hsex == 0) {
                    enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 0));
                } else {
                    enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 1));
                }

                enemies.getFirst().esetpos(px, py);
                citizens.remove(i);
                citizens_died++;
                break;

            default:

                break;
        }
    }

    int bulletpp() {

        if (addfac(30) == 1 && fileline.get(30).charAt(74)==' ') {
            bullets.push(new Bullet("Bullet", 'B'));
            bullets.getLast().bsetpos(74, 30);
            fileset(30, 74, 'B');
            return 1;
        }
        return 0;
    }
   
    int lifepp() {

        if (addfac(100) == 1 && fileline.get(20).charAt(20)==' ') {
            player.plife("LIFE");
            player.lx = 5;
            player.ly = 27;

            fileset(27, 5, 'L');
            return 1;
        }
        return 0;
    }

    int foodpp() {

        if (addfac(50) == 1 && fileline.get(player.fy).charAt(player.fx)==' ') {
            player.pfood("FOOD");
            player.fx = 104;
            player.fy = 5;
            fileset(5, 104, 'F');
            return 1;
        }
        return 0;
    }

    void humanpp() {

        if (addfac(30) == 1 && fileline.get(20).charAt(55)==' ') {
            if (hs1 == 0) {
                citizens.push(new citizen("HUMANS", 150, 10, 'H', 10, 0, 1));
                citizens.getFirst().hsetpos(55, 20);
                hs1 = 1;
            }
            if (hs1 == 1 && fileline.get(18).charAt(55)==' ') {
                citizens.push(new citizen("HUMANS", 150, 10, 'H', 10, 0, 0));
                citizens.getFirst().hsetpos(55, 18);
                hs1 = 0;
            }

        }
    }

    void engpp() {

        if (addfac(30) == 1 && fileline.get(20).charAt(71)==' ') {
            citizens.push(new citizen("ENGINEERS", 150, 10, 'E', 10, 0, 1));
            citizens.getFirst().hsetpos(71, 20);
        }
    }

    void docpp() {

        if (addfac(30) == 1 && fileline.get(20).charAt(75)==' ') {
            citizens.push(new citizen("DOCTORS", 150, 10, 'D', 10, 0, 1));
            citizens.getFirst().hsetpos(75, 20);
        }
    }
    static int z1, hs1, hs2, z2;

    void enemypp() {

        if (addfac(50) == 1) {

            playsound("C:\\ZUMANS\\audios_zumans\\Zombie-Growl.wav");

            if (z1 == 0 && fileline.get(20).charAt(20)==' ') {
                enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 0));
                enemies.getFirst().esetpos(20, 20);
                z1 = 1;
            }
            if (z1 == 1 && fileline.get(20).charAt(70)==' ') {
                enemies.push(new enemy("ZOMBIE", 1, 100, 100, 'Z', 5, total_zombies++, 1));
                enemies.getFirst().esetpos(70, 20);
                z1 = 0;
            }
        }
    }

    int medpp() {

        if (player._plevel >= winlevel) {
            if (addfac(20) == 1 && fileline.get(my).charAt(mx)==' ') {
                fileset(my, mx, 'V');
                return 1;
            }
        }
        return 0;
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ZUMANS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ZUMANS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ZUMANS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ZUMANS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ZUMANS().setVisible(true);
            }
        });
    }

    int ex;
    int ey;
    int mx, my;

    int dly;

    int edx, edy, eadx, eady, ed;
    //int ddx, ddy, dadx, dady, dd;
    int hdx, hdy, hadx, hady, hd;
    int dx, dy, d, adx, ady, iy;
    int u = 0;
    int epxp = 50;

    private LinkedList<JLabel> lae = new LinkedList<>();
    private LinkedList<Label> labels = new LinkedList<>();
    private LinkedList<JButton> buttons = new LinkedList<>();
    private LinkedList<Character> guntouch = new LinkedList<>();
    private LinkedList<enemy> enemies = new LinkedList<>();
    private LinkedList<citizen> citizens = new LinkedList<>();
    private LinkedList<Gun> guns = new LinkedList<>();
    private LinkedList<Bullet> bullets = new LinkedList<>();
    Player player = new Player();
    Random rand = new Random();

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BEngineer;
    private javax.swing.JButton BMap;
    private javax.swing.JButton Bbiotech;
    private javax.swing.JButton Bbullet;
    private javax.swing.JButton Bfire;
    private javax.swing.JButton Bfood;
    private javax.swing.JButton Bgun;
    private javax.swing.JButton Bgun1;
    private javax.swing.JButton Bhuman;
    private javax.swing.JButton Bhuman1;
    private javax.swing.JButton Bhwall;
    private javax.swing.JButton Bmedicine;
    private javax.swing.JButton Bplayer;
    private javax.swing.JButton Btree;
    private javax.swing.JButton Bvaccine1;
    private javax.swing.JButton Bvwall;
    private javax.swing.JButton Bvwall1;
    private javax.swing.JButton Bzombie;
    private javax.swing.JButton Bzombie1;
    private javax.swing.JTextArea Commentbox;
    private javax.swing.JPanel Loldtown;
    private javax.swing.JLabel TLBC;
    private javax.swing.JLabel TLCC;
    private javax.swing.JLabel TLCS;
    private javax.swing.JLabel TLL;
    private javax.swing.JLabel TLLP;
    private javax.swing.JLabel TLPG;
    private javax.swing.JLabel TLZC;
    private javax.swing.JLabel TLZK;
    private javax.swing.JTabbedPane Tcomments;
    private javax.swing.JPanel Tstatus;
    private javax.swing.JPanel basePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

}
